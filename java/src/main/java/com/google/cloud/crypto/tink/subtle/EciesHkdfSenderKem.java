// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

package com.google.cloud.crypto.tink.subtle;

import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import javax.crypto.KeyAgreement;

/**
 * HKDF-based KEM (key encapsulation mechanism) for ECIES sender.
 */
public final class EciesHkdfSenderKem {
  private ECPublicKey recipientPublicKey;

  /**
   * A container for key parts generated by the KEM.
   */
  public final class KemKey {
    private ECPublicKey ephemeralPublicKey;
    private byte[] symmetricKey;
    public KemKey(final ECPublicKey ephemeralPublicKey, final byte[] symmetricKey) {
      this.ephemeralPublicKey = ephemeralPublicKey;
      this.symmetricKey = symmetricKey;
    }
    public ECPublicKey getEphemeralPublicKey() {
      return ephemeralPublicKey;
    }
    public byte[] getSymmetricKey() {
      return symmetricKey;
    }
  }

  public EciesHkdfSenderKem(final ECPublicKey recipientPublicKey) {
    this.recipientPublicKey = recipientPublicKey;
  }

  public KemKey generateKey(int keySizeInBytes,
      String hmacAlgo, final byte[] hkdfSalt, final byte[] hkdfInfo)
      throws GeneralSecurityException {
    KeyPair ephemeralKeyPair = generateEphemeralKey();
    ECPublicKey ephemeralPublicKey = (ECPublicKey) ephemeralKeyPair.getPublic();
    ECPrivateKey ephemeralPrivateKey = (ECPrivateKey) ephemeralKeyPair.getPrivate();

    byte[] sharedSecret = getSharedSecret(ephemeralPrivateKey);
    byte[] symmetricKey = Hkdf.computeEciesHkdfSymmetricKey(ephemeralPublicKey, sharedSecret,
        keySizeInBytes, hmacAlgo, hkdfSalt, hkdfInfo);
    return new KemKey(ephemeralPublicKey, symmetricKey);
  }

  private KeyPair generateEphemeralKey()
      throws GeneralSecurityException {
    ECParameterSpec spec = recipientPublicKey.getParams();
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance("EC");
    keyGen.initialize(spec);
    return keyGen.generateKeyPair();
  }

  private byte[] getSharedSecret(final ECPrivateKey senderPrivateKey)
      throws GeneralSecurityException {
    ECPoint publicPoint = recipientPublicKey.getW();
    ECParameterSpec spec = recipientPublicKey.getParams();
    EcUtil.checkPointOnCurve(publicPoint, spec.getCurve());
    KeyAgreement ka = KeyAgreement.getInstance("ECDH");
    ka.init(senderPrivateKey);
    ka.doPhase(recipientPublicKey, true);
    return ka.generateSecret();
  }
}
