// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

// Definitions for Elliptic Curve Digital Signature Algorithm (ECDSA).
syntax = "proto3";

package google.cloud.crypto.tink;
import "proto/common.proto";
import "proto/hmac.proto";
import "proto/tink.proto";

option java_package = "com.google.cloud.crypto.tink";
option java_outer_classname = "EciesProto";

// Protos for keys for ECIES with HKDF.
//
// These definitions follow roughly ECIES ISO 18033-2 standard
// (Elliptic Curve Integrated Encryption Scheme, see http://www.shoup.net/iso/std6.pdf),
// with a diffrenece that they use HKDF key derivation function instead of KDF1 and KDF2
// functions specified in ISO 18033-2.  The reason for this change is enabling the use of
// optional parameters to the key derivation function, which strenghten the overall
// security and allow for binding the key material to application-specific information
// (cf. RFC 5869, https://tools.ietf.org/html/rfc5869)
//
// ECIES-keys represent HybridEncryption resp. HybridDecryption primitives.

// Parameters of KEM (Key Encapsulation Mechanism)
message EciesHkdfKemParams {
  enum KaType {  // Key Agreement.
    UNKNOWN_KA = 0;
    DIFFIE_HELLMAN = 1;
    COFACTOR_DIFFIE_HELLMAN = 2;
  }

  // Required.
  EllipticCurveType curve_type = 1;

  // Required.
  KaType ka_type = 2;


  // HMAC used by HKDF.
  // Required.
  HmacParams hmac = 3;
}

// Parameters of DEM (Data Encapsulation Mechanism).
message EciesDemParams {
  enum DemType {
    UNKNOWN_DEM = 0;
    DEM1 = 1;
    DEM2 = 2;
    DEM3 = 3;
  }

  // Required.
  DemType dem_type = 1;

  // Required for DEM1, DEM2, DEM3.
  KeyFormat mac_algorithm = 2;  // E.g. HmacKeyFormat.

  // Required for DEM1, DEM2.
  KeyFormat sc_algorithm = 3;   // Symmetric cipher, e.g. AesKeyFormat.

  // Required for DEM2.
  int32 label_size = 4;

  // Required for DEM3.
  int32 msg_size = 5;
}

message EciesIso180332HkdfParams {
  // Key Encapsulation Mechanism.
  // Required.
  EciesHkdfKemParams kem_params = 1;

  // Data Encapsulation Mechanism.
  // Required.
  EciesDemParams dem_params = 2;

  // Size of the keys generated by KEM and used by DEM (in bytes).
  // Required.
  int32 symmetric_key_size = 3;
}

// EciesIso180332HkdfPublicKey represents HybridEncryption primitive.
// key_type: type.googleapis.com/google.cloud.crypto.tink.EciesIso180332PublicKey
message EciesIso180332HkdfPublicKey {
  // Required.
  int32 version = 1;
  // Required.
  EciesIso180332HkdfParams params = 2;

  // Affine coordinates of the public key in bigendian representation.
  // The public key is a point (x, y) on the curve defined by params.kem_params.curve.
  // Required.
  bytes x = 3;
  // Required.
  bytes y = 4;
}

// EciesIso180332KdfPrivateKey represents HybridDecryption primitive.
// key_type: type.googleapis.com/google.cloud.crypto.tink.EciesIso180332PrivateKey
message EciesIso180332HkdfPrivateKey {
  // Required.
  int32 version = 1;

  // Required.
  EciesIso180332HkdfPublicKey public_key = 2;

  // Required.
  bytes key_value = 3;  // Big integer in bigendian representation.
}
